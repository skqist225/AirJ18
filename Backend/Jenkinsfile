// def modules = [:]
// CODE_CHANGES = getGitChanges()
pipeline {
    agent any
    options {
        skipStagesAfterUnstable()
    }
    parameters {
        // choice(name: 'VERSION', choices: ['1.1.0', '1.2.0', '1.3.0'], description: '')
        booleanParam(name: 'executeBuild', defaultValue: true, description: '')
    }
    environment {
        BACKEND_FOLDER = 'Backend'
    }
    stages {
        // stage('init') {
        //     steps {
        //         script {
        //             modules.build = load '$WORKSPACE/$JOB_NAME/Backend/script.groovy'
        //         }
        //     }
        // }
        stage('Build') {
            when {
                expression {
                    params.executeBuild
                }
            }
            steps {
                // script {
                //     modules.build.buildApp()
                // }
                sh 'echo $(pwd)'
                sh 'mvn clean package --file */pom.xml'
            }
        }
        stage('Send Build Artifact To AWS S3') {
            environment {
                AWS_S3_BUCKET = 'airj18'
            }
            // when {
            //     expression {
            //         BRANCH_NAME == 'main' || BRANCH_NAME == 'master'
            //     // && CODE_CHANGES
            //     }
            // }
            steps {
                sh "aws s3 cp ${WORKSPACE}/${BACKEND_FOLDER}/target/*.war s3://${AWS_S3_BUCKET}"
                // script {
                //     modules.build.sendArtifactToS3()
                /* }*/
            }
        }
        stage('Build Docker Image') {
            // withCredentials([string(credentialsId: 'DockerHubPassword', variable: 'dockerHubPassword1')]) {
            //     sh "docker login -u skqist225 -p ${dockerHubPassword1}"
            // }
            sh "sudo -S jar -xvf ${WORKSPACE}/${BACKEND_FOLDER}/target/*.war"
            sh "docker build -t skqist225/airj18 ${WORKSPACE}/${BACKEND_FOLDER}"
        }
        stage('Push Docker Image') {
            // withCredentials([string(credentialsId: 'DockerHubPassword', variable: 'dockerHubPassword2')]) {
            //     sh "docker login -u skqist225 -p ${dockerHubPassword2}"
            // }
            sh 'docker push skqist225/airj18'
        }
        stage('Deploy Application Prodution Stage') {
            steps {
                timeout(time:5, unit:'DAYS') {
                    input message: 'Approve PRODUCTION Deployment?'
                }
                sshPublisher(
                    publishers: [sshPublisherDesc(configName: 'ubuntu@54.255.237.181',
                    transfers: [sshTransfer(cleanRemote: false, excludes: '',
                    // execCommand: '~/airtnt-build.sh ${DB_URL} ${DB_USER} ${DB_PASSWORD}',
                    /* groovylint-disable-next-line LineLength */
                    execCommand: '~/airtnt-build.sh airtnt.cvkwid3ehrok.ap-southeast-1.rds.amazonaws.com admin 12345678',
                    execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false,
                    patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '',
                    sourceFiles: '.')],
                    usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)]
                )
            }
            post {
                success {
                    emailext(
                        body: 'build successfully.',
                        recipientProviders: [buildUser()],
                        subject: 'Build AirJ18 Successfully',
                        to: 'thuan.leminhthuan.10.2@gmail.com'
                    )
                }
            }
        }
    }
}
